plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
}

group = 'jscode'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	// implementation 'com.querydsl:querydsl-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// 스프링 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// jwt 설정
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Swagger 설정
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

	// thymeleaf 설정
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	testImplementation 'junit:junit:4.13.1'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

// 리포트의 저장 경로를 설정합니다.
		html.destination file("jacoco/jacocoHtml")
		xml.destination file("jacoco/jacoco.xml")
	}
}

jacocoTestCoverageVerification {

	violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
